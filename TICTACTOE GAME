import java.util.Scanner;

class TicTacToe {
    static char[][] Board;

    public TicTacToe() {
        Board = new char[3][3];
        initBoard();
    }

    void initBoard() {
        for (int i = 0; i < Board.length; i++) {
            for (int j = 0; j < Board[i].length; j++) {
                Board[i][j] = ' ';
            }
        }
    }

    static void displayBoard() {
        System.out.println("-------------");
        for (int i = 0; i < Board.length; i++) {
            System.out.print("|");
            for (int j = 0; j < Board[i].length; j++) {
                System.out.print(Board[i][j] + "|");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    static void placeMark(int row, int col, char mark) {
        if (row >= 0 && row <= 2 && col >= 0 && col <= 2) {
            if (Board[row][col] == ' ') {
                Board[row][col] = mark;
            } else {
                System.out.println("Cell already occupied. Try again.");
            }
        } else {
            System.out.println("Invalid move. Try again.");
        }
    }

    static boolean checkColWin() {
        for (int j = 0; j <= 2; j++) {
            if (Board[0][j] == Board[1][j] && Board[1][j] == Board[2][j] && Board[0][j] != ' ') {
                return true;
            }
        }
        return false;
    }

    static boolean checkRowWin() {
        for (int i = 0; i <= 2; i++) {
            if (Board[i][0] == Board[i][1] && Board[i][1] == Board[i][2] && Board[i][0] != ' ') {
                return true;
            }
        }
        return false;
    }

    static boolean checkDiagWin() {
        if ((Board[0][0] == Board[1][1] && Board[1][1] == Board[2][2] && Board[0][0] != ' ') ||
            (Board[0][2] == Board[1][1] && Board[1][1] == Board[2][0] && Board[0][2] != ' ')) {
            return true;
        }
        return false;
    }
}

class HumanPlayer {
    String name;
    char mark;

    HumanPlayer(String name, char mark) {
        this.name = name;
        this.mark = mark;
    }

    void makeMove() {
        Scanner sc = new Scanner(System.in);
        int row;
        int col;
        do {
            System.out.println(name + ", enter the row and column (0-2) to place '" + mark + "':");
            row = sc.nextInt();
            col = sc.nextInt();
        } while (!isValidMove(row, col));
        TicTacToe.placeMark(row, col, mark);
    }

    boolean isValidMove(int row, int col) {
        if (row >= 0 && row <= 2 && col >= 0 && col <= 2) {
            if (TicTacToe.Board[row][col] == ' ') {
                return true;
            }
        }
        System.out.println("Invalid move. Try again.");
        return false;
    }
}

public class LaunchGame {
    public static void main(String[] args) {
        TicTacToe t = new TicTacToe();
        HumanPlayer p1 = new HumanPlayer("Bob", 'x');
        HumanPlayer p2 = new HumanPlayer("Priya", 'o');
        HumanPlayer currentPlayer = p1;

        while (true) {
            System.out.println(currentPlayer.name + "'s turn");
            TicTacToe.displayBoard();
            currentPlayer.makeMove();

            if (TicTacToe.checkColWin() || TicTacToe.checkRowWin() || TicTacToe.checkDiagWin()) {
                System.out.println(currentPlayer.name + " has won!");
                TicTacToe.displayBoard();
                break;
            } else if (isBoardFull()) {
                System.out.println("It's a draw!");
                TicTacToe.displayBoard();
                break;
            } else {
                currentPlayer = (currentPlayer == p1) ? p2 : p1;
            }
        }
    }

    static boolean isBoardFull() {
        for (int i = 0; i < TicTacToe.Board.length; i++) {
            for (int j = 0; j < TicTacToe.Board[i].length; j++) {
                if (TicTacToe.Board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }
}
